import React from "react";

import Button from "direct-core/UI/Button";

class RecordVoice extends React.PureComponent {

  chunks = []
  reader = new FileReader()

  state = {
    audios: []
  }

  makeNewClip({ clip ,  sum , mostOccured , occuredTime }){
    const oldAudios = [...this.state.audios];
    oldAudios.push({
      clip,
      sum,
      mostOccured,
      occuredTime
    });
    this.setState({
      audios: oldAudios
    })
  }

  componentDidMount(){
    navigator.mediaDevices.getUserMedia({
      audio: true
    }).then( stream => {
        this.mediaRecorder = new MediaRecorder( stream )
        this.mediaRecorder.ondataavailable = ev => {
        this.chunks.push( ev.data )
        this.analysis( new Blob( [ev.data] , { type: "audio/ogg" } ) );
      }

    }).catch( err => {
      console.log( err );
    })
  }

  getAudio = ref => this.audio = ref

  analysis( data ){
    this.reader.readAsArrayBuffer( data )
    this.reader.onloadend = () => {
      let count = []
      let sum = 0
      let occuredTime = -Infinity;
      let mostOccured = 0;
      for( let r of new Int8Array( this.reader.result ) ){
        count[r] === undefined ? count[r] = 0 : count[r]++
        sum += r
      }
      for( let i = 0 ; i < count.length ; i++ ){
        if( count[i] > occuredTime ){
          occuredTime = count[i]
          mostOccured = i;
        }
      }
      this.makeNewClip({
        clip: URL.createObjectURL( data ),
        sum,
        mostOccured,
        occuredTime
      })
    }

  }

  startRecord = () => {
    if( this.mediaRecorder.state === "recording" ){
      return
    }
    this.mediaRecorder.start();
    setTimeout( this.cutRecord , 600 );
  }

  cutRecord = () => {
    this.mediaRecorder.stop();
    this.startRecord();
  }

  stopReord = () => {
    if( this.mediaRecorder.stat === "inactive" ){
      return
    }
    this.mediaRecorder.stop();
  }

  mergeRecords = () => {
    var blob = new Blob( this.chunks , {
      type: "audio/ogg"
    });

    console.log( blob );
    console.log( this.chunks );
    this.chunks = [];
    var audioURL = URL.createObjectURL( blob );
    this.audio.src = audioURL;
  }

  render(){
    const { audios } = this.state;
    return (
      <React.Fragment>
        <Button
          onClick={this.startRecord}
          text="开始"
        />
        <Button
          onClick={this.mergeRecords}
          text="合成"
        />
        <Button
          onClick={this.stopReord}
          text="终止"
        />
        <div>
          <span>Main audio</span>
          <audio
            controls
            ref={this.getAudio}
          />
        </div>
        {
          audios.map( audio => (
            <div key={audio.clip}>
              <audio
                controls
                src={audio.clip}
              />
              <br/>
              <span>Sum:{audio.sum}</span><br/>
              <span>mostOccured:{audio.mostOccured}</span><br/>
              <span>occuredTime:{audio.occuredTime}</span><br/>
            </div>
          ))
        }
      </React.Fragment>
    )
  }
};

export default RecordVoice;
